generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Match {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  home        Team     @relation("HomeTeam", fields: [homeTeamId], references: [id])
  guest       Team     @relation("GuestTeam", fields: [guestTeamId], references: [id])
  home_score  Int      @default(0)
  guest_score Int      @default(0)
  homeTeamId  Int
  guestTeamId Int
}

model Team {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  team_name    String
  team_icon    String?
  team_desc    String?  @default("")
  team_abbv    String?  @default("")
  homeMatches  Match[]  @relation("HomeTeam")
  guestMatches Match[]  @relation("GuestTeam")
}

model Article {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  title       String  @db.VarChar(255)
  slug        String  @db.VarChar(255)
  description String? @db.VarChar(255)
  content     String?
  published   Boolean @default(false)
  banner      String?
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  username String
  password String
  tokens   Token[]
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name      String
  galleries Gallery[]
}

model Gallery {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name       String
  medias     Media[]
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model Media {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  fileName        String
  url             String
  directory       String
  pseudoDirectory String   @default("/")
  isFolder        Boolean  @default(false)
  Gallery         Gallery? @relation(fields: [galleryId], references: [id])
  galleryId       Int?
}

model Token {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  uuid   String @unique
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}
